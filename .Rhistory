breaks=c('average', 'inf', 'sup'),
values=c('average'='solid', 'inf'='dotted',
'sup'='dotted')) +
ylim(c(0,0.06)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5))
prob<-grid.arrange(prob_m1,prob_m3,prob_m2,ncol=3)
setwd("~/GitHub/MRF-GAM-estimation-/rfiles/predictions")
setwd("~/GitHub/MRF-GAM-estimation-")
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
load("data/modelli")
source("rfiles/functions/fish_pred.ci_zip.R")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
prov<-read.xlsx("data/province_ita.xlsx")
#### MODELS PREDICTION ###
rm (list=ls())
library(openxlsx)
library(mgcv)
library (ggplot2)
library(gridExtra)
setwd("~/GitHub/MRF-GAM-estimation-")
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
load("data/modelli")
source("rfiles/functions/fish_pred.ci_zip.R")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
prov<-read.xlsx("data/province_ita.xlsx")
linear<-fish_pred.ci_zip(trc_m4,newdata,1000, prov)
rm(list = ls())
library(mgcv)
library(openxlsx)
library (ggplot2)
library(gridExtra)
setwd("~/GitHub/MRF-GAM-estimation-/rfiles/rob_checks")
setwd("~/GitHub/MRF-GAM-estimation-")
#import the dataset
data<-read.xlsx("data/gam_fish_data_v2.xlsx")
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
##subsetting for age
data<-data[data$age>=14,]
### dataset for predictions
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
## initialize some empty vectors
MAPE.fish<-vector()
MAPE.trips<-vector()
MAPE.fish_inf90<- vector()
MAPE.fish_sup90<- vector()
MAPE.fish_inf95<- vector()
MAPE.fish_sup95<- vector()
MAPE.trips_inf90<- vector()
MAPE.trips_sup90<- vector()
MAPE.trips_inf95<- vector()
MAPE.trips_sup95<- vector()
n.vec = c(1000,2000,4000,6000,8000)
true_total <-  c(1513000, 28843000)
true_total <-  c(1513000, 28843000)
T.fish<-true_total[1]   ## linear
T.trips<-true_total[2]
R = 10
j = 1
n<-n.vec[j]
fishers.vec<-vector()
trips.vec<-vector()
df<-data[sample(N,n, replace = F),] ## extract a random sample
formula = list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
formula = gam( list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
knots = list(0,2,3,4,max(data$tr_cost)),
data = df, family=ziplss(), gamma = 1)
formula = list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
##subsetting for age
data<-data[data$age>=14,]
### dataset for predictions
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
subsample_simulation<- function(model,newdata, R = 1000, n.vec = c(1000,2000,4000,6000,8000),
true_total ){
## initialize some empty vectors
MAPE.fish<-vector()
MAPE.trips<-vector()
MAPE.fish_inf90<- vector()
MAPE.fish_sup90<- vector()
MAPE.fish_inf95<- vector()
MAPE.fish_sup95<- vector()
MAPE.trips_inf90<- vector()
MAPE.trips_sup90<- vector()
MAPE.trips_inf95<- vector()
MAPE.trips_sup95<- vector()
T.fish<-true_total[1]   ## linear
T.trips<-true_total[2]
a<-Sys.time()
for (j in 1:length(n.vec)){
n<-n.vec[j]
## initialize two empty vectors to store results
fishers.vec<-vector()
trips.vec<-vector()
for (i in 1:R){
df<-data[sample(N,n, replace = F),] ## extract a random sample
if(model == 3){
trc_m6<-gam( list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
knots = list(0,2,3,4,max(data$tr_cost)),
data = df, family=ziplss(), gamma = 1)}
if(model == 2){
trc_m6<-gam( list(uscite ~ log(tr_cost) + log(age) + male,
~  log(tr_cost) + log(age) + male),
data = df, family=ziplss())}
if(model == 1){
trc_m6<-gam( list(uscite ~ tr_cost + age + male,
~  tr_cost + age + male),
data = df, family=ziplss())}
## compute the predictions
## predicted fishermen: GAM
pred_m3<-1-exp(-exp(predict.gam(trc_m6,newdata = newdata)[,2]))
fishers<-round(pred_m3*newdata$popres_class)
fishers.vec[i]<-sum(fishers)
## predicted trips: GAM
lam_m6<-exp(predict.gam(trc_m6,newdata = newdata)[,1])
pi_m6<-1-exp(-exp(predict.gam(trc_m6,newdata = newdata)[,2]))
pred_m6 <- lam_m6*pi_m6
trips<-round(pred_m6*newdata$popres_class)
if(is.nan(sum(trips))){trips.vec[i]<-(10^9)}
else{trips.vec[i]<-sum(trips)}
print(paste("model estimation", i, "completed"))
}
MAPE.fish[j] <-median(abs((fishers.vec-T.fish)/T.fish))
MAPE.trips[j]<-median(abs((trips.vec-T.trips)/T.trips))
perc.fish<- quantile(abs((fishers.vec-T.fish)/T.fish), probs =  c(0.025,  0.05, 0.95,  0.975))
perc.trips<-quantile(abs((trips.vec-T.trips)/T.trips), probs =  c(0.025,  0.05, 0.95,  0.975))
MAPE.fish_inf90[j] <- perc.fish[2]
MAPE.fish_sup90[j] <- perc.fish[3]
MAPE.fish_inf95[j] <- perc.fish[1]
MAPE.fish_sup95[j] <- perc.fish[4]
MAPE.trips_inf90[j] <- perc.trips[2]
MAPE.trips_sup90[j] <- perc.trips[3]
MAPE.trips_inf95[j] <- perc.trips[1]
MAPE.trips_sup95[j] <- perc.trips[4]
print(paste("subsample simulation", j, "completed at", Sys.time()))
}
b<-Sys.time()
a-b
MAPE.fish<-round(MAPE.fish,3)
MAPE.trips<-round(MAPE.trips,3)
MAPE.fish_inf90<-round(MAPE.fish_inf90,3)
MAPE.fish_sup90<-round(MAPE.fish_sup90,3)
MAPE.fish_inf95<-round(MAPE.fish_inf95,3)
MAPE.fish_sup95<-round(MAPE.fish_sup95,3)
MAPE.trips_inf90<-round(MAPE.trips_inf90,3)
MAPE.trips_sup90<-round(MAPE.trips_sup90,3)
MAPE.trips_inf95<-round(MAPE.trips_inf95,3)
MAPE.trips_sup95<-round(MAPE.trips_sup95,3)
p.data<-data.frame("n" = rep(c(1000,2000,4000,6000,8000),2),
"MAPE" = c(MAPE.fish,MAPE.trips),
"MAPE_inf90"= c(MAPE.fish_inf90,MAPE.trips_inf90),
"MAPE_sup90"= c(MAPE.fish_sup90,MAPE.trips_sup90),
"MAPE_inf95"= c(MAPE.fish_inf95,MAPE.trips_inf95),
"MAPE_sup95"= c(MAPE.fish_sup95,MAPE.trips_sup95),
"type" = rep(c("fishers","trips"),each = 5) )
p.data$type <- factor(p.data$type, levels = c("trips", "fishers"))
return(p.data)
}
subsample_simulation(model = 1, newdata,  R = 10,true_total = c(1513000,28843000) )
nrow(data)
subsample_simulation<- function(data, model,newdata, R = 1000, n.vec = c(1000,2000,4000,6000,8000),
true_total ){
## initialize some empty vectors
MAPE.fish<-vector()
MAPE.trips<-vector()
MAPE.fish_inf90<- vector()
MAPE.fish_sup90<- vector()
MAPE.fish_inf95<- vector()
MAPE.fish_sup95<- vector()
MAPE.trips_inf90<- vector()
MAPE.trips_sup90<- vector()
MAPE.trips_inf95<- vector()
MAPE.trips_sup95<- vector()
T.fish<-true_total[1]   ## linear
T.trips<-true_total[2]
a<-Sys.time()
for (j in 1:length(n.vec)){
n<-n.vec[j]
## initialize two empty vectors to store results
fishers.vec<-vector()
trips.vec<-vector()
for (i in 1:R){
df<-data[sample(nrow(data),n, replace = F),] ## extract a random sample
if(model == 3){
trc_m6<-gam( list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
knots = list(0,2,3,4,max(data$tr_cost)),
data = df, family=ziplss(), gamma = 1)}
if(model == 2){
trc_m6<-gam( list(uscite ~ log(tr_cost) + log(age) + male,
~  log(tr_cost) + log(age) + male),
data = df, family=ziplss())}
if(model == 1){
trc_m6<-gam( list(uscite ~ tr_cost + age + male,
~  tr_cost + age + male),
data = df, family=ziplss())}
## compute the predictions
## predicted fishermen: GAM
pred_m3<-1-exp(-exp(predict.gam(trc_m6,newdata = newdata)[,2]))
fishers<-round(pred_m3*newdata$popres_class)
fishers.vec[i]<-sum(fishers)
## predicted trips: GAM
lam_m6<-exp(predict.gam(trc_m6,newdata = newdata)[,1])
pi_m6<-1-exp(-exp(predict.gam(trc_m6,newdata = newdata)[,2]))
pred_m6 <- lam_m6*pi_m6
trips<-round(pred_m6*newdata$popres_class)
if(is.nan(sum(trips))){trips.vec[i]<-(10^9)}
else{trips.vec[i]<-sum(trips)}
print(paste("model estimation", i, "completed"))
}
MAPE.fish[j] <-median(abs((fishers.vec-T.fish)/T.fish))
MAPE.trips[j]<-median(abs((trips.vec-T.trips)/T.trips))
perc.fish<- quantile(abs((fishers.vec-T.fish)/T.fish), probs =  c(0.025,  0.05, 0.95,  0.975))
perc.trips<-quantile(abs((trips.vec-T.trips)/T.trips), probs =  c(0.025,  0.05, 0.95,  0.975))
MAPE.fish_inf90[j] <- perc.fish[2]
MAPE.fish_sup90[j] <- perc.fish[3]
MAPE.fish_inf95[j] <- perc.fish[1]
MAPE.fish_sup95[j] <- perc.fish[4]
MAPE.trips_inf90[j] <- perc.trips[2]
MAPE.trips_sup90[j] <- perc.trips[3]
MAPE.trips_inf95[j] <- perc.trips[1]
MAPE.trips_sup95[j] <- perc.trips[4]
print(paste("subsample simulation", j, "completed at", Sys.time()))
}
b<-Sys.time()
a-b
MAPE.fish<-round(MAPE.fish,3)
MAPE.trips<-round(MAPE.trips,3)
MAPE.fish_inf90<-round(MAPE.fish_inf90,3)
MAPE.fish_sup90<-round(MAPE.fish_sup90,3)
MAPE.fish_inf95<-round(MAPE.fish_inf95,3)
MAPE.fish_sup95<-round(MAPE.fish_sup95,3)
MAPE.trips_inf90<-round(MAPE.trips_inf90,3)
MAPE.trips_sup90<-round(MAPE.trips_sup90,3)
MAPE.trips_inf95<-round(MAPE.trips_inf95,3)
MAPE.trips_sup95<-round(MAPE.trips_sup95,3)
p.data<-data.frame("n" = rep(c(1000,2000,4000,6000,8000),2),
"MAPE" = c(MAPE.fish,MAPE.trips),
"MAPE_inf90"= c(MAPE.fish_inf90,MAPE.trips_inf90),
"MAPE_sup90"= c(MAPE.fish_sup90,MAPE.trips_sup90),
"MAPE_inf95"= c(MAPE.fish_inf95,MAPE.trips_inf95),
"MAPE_sup95"= c(MAPE.fish_sup95,MAPE.trips_sup95),
"type" = rep(c("fishers","trips"),each = 5) )
p.data$type <- factor(p.data$type, levels = c("trips", "fishers"))
return(p.data)
}
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
##subsetting for age
data<-data[data$age>=14,]
### dataset for predictions
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
true_total <-  c(1513000, 28843000)
R = 10
subsample_simulation(data, model = 1, newdata,  R = 10,true_total = c(1513000,28843000))
linear_pred<-subsample_simulation(data, model = 1, newdata,  R = R,true_total = c(1513000,28843000))
View(linear_pred)
rm(list =ls())
setwd("~/GitHub/MRF-GAM-estimation-/rfiles/rob_checks")
setwd("~/GitHub/MRF-GAM-estimation-")
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
##subsetting for age
data<-data[data$age>=14,]
a<-data[data$uscite>250,]
### here the truncation
cutoff<-150
data<-data[data$uscite<cutoff,]
trc_m4<-gam( list(uscite ~ tr_cost + age + male,
~ tr_cost + age  + male),
data = data, family=ziplss())
rm(list = ls())
library(mgcv)
library(openxlsx)
library (ggplot2)
library(gridExtra)
setwd("~/GitHub/MRF-GAM-estimation-")
#import the dataset
data<-read.xlsx("data/gam_fish_data_v3.xlsx")
##solo primi rispondenti
data<- data[!duplicated(data$fam_id),]
##VTT defined as in Fezzi et al. 2014
data$VTT<-0.75*(data$average_inc/2000)
##compute travel cost with 1.5 euro per liter and fuel efficiency of 0.057 l/km
##2019 data by ministero per la transizione ecologica e IEA (round trip calculation)
data$tr_cost<- (data$VTT * (data$time_maps*2/3600)) + ((data$dist_maps*2/1000)*(1.5*0.057))
##subsetting for age
data<-data[data$age>=14,]
a<-data[data$uscite>250,]
### here the truncation
cutoff<-150 ## change the cutoff accordingly to replicate the results
data<-data[data$uscite<cutoff,]
## USCITE ZERO INFLATED POISSON GAM
# linear
trc_m4<-gam( list(uscite ~ tr_cost + age + male,
~ tr_cost + age  + male),
data = data, family=ziplss())
# log
trc_m5<-gam( list(uscite ~ log(tr_cost) + log(age) + male,
~ log(tr_cost) + log(age) + male),
data = data, family=ziplss())
# gam
trc_m6<-gam( list(uscite ~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5) + male,
~ s(tr_cost, bs="cr", k=5) +
s(age, bs = "cr",k = 5)+ male),
knots = list(0,2,3,4,max(data$tr_cost)),
data = data, family=ziplss(), gamma = 1)
plot.gam(trc_m6)
#############  PREDICTIONS #######################
source("R files for estimation and plotting/functions/fish_pred.ci_zip.R")
source("rfiles/functions/fish_pred.ci_zip.R")
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
source("rfiles/functions/fish_pred.ci_zip.R")
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata,n = 1000, prov = NULL)
source("rfiles/functions/fish_pred.ci_zip.R")
newdata<-read.xlsx("data/distanze_ageclass.xlsx")
##compute tr cost for predictions
newdata$VTT<-0.75*(newdata$Reddito.comune/2000)
newdata$tr_cost<- ((newdata$VTT * (newdata$time_gmaps*2/3600)) + (newdata$dist_gmaps*2/1000)*(1.5*0.057))
## set male presence
newdata$male<-newdata$male/newdata$pop_res
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata,n = 1000, prov = NULL)
gam<-fish_pred.ci_zip(model = trc_m6, newdata = newdata,n = 1000, prov = NULL)
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata,n = 1000, prov = NULL)
View(fish_pred.ci_zip)
model = trc_m4
n = 1000
sigma<-vcov(model) ##covariance matrix of the model
beta<-coef(model)  ##coefficients of the model
draw<-mvrnorm(n, beta, sigma) ##simulations from a multivariate normal
ones.vec<-vector()
count.vec<-vector()
if(exists("prov")){
newdata<-left_join(newdata, prov)
}
for (i in 1:n){
model$coefficients<-draw[i,]
lam<-exp(predict.gam(model,newdata = newdata)[,1])
pi<-1-exp(-exp(predict.gam(model,newdata = newdata)[,2]))
ones<- pi * newdata$popres_class
count<-lam*pi*newdata$popres_class
if(exists("prov")){
ones<-ones[newdata$coastal_region == 1]
count<-count[newdata$coastal_region == 1]
}
ones.vec[i]<-sum(ones)
count.vec[i]<-sum(count)
}
library(MASS)
fish_pred.ci_zip<-function(model, newdata,n = 1000, prov = NULL){
## computing confidence interval for prediction for a gam object with zip distribution
## of the response variable
sigma<-vcov(model) ##covariance matrix of the model
beta<-coef(model)  ##coefficients of the model
draw<-mvrnorm(n, beta, sigma) ##simulations from a multivariate normal
ones.vec<-vector()
count.vec<-vector()
if(exists("prov")){
newdata<-left_join(newdata, prov)
}
for (i in 1:n){
model$coefficients<-draw[i,]
lam<-exp(predict.gam(model,newdata = newdata)[,1])
pi<-1-exp(-exp(predict.gam(model,newdata = newdata)[,2]))
ones<- pi * newdata$popres_class
count<-lam*pi*newdata$popres_class
if(exists("prov")){
ones<-ones[newdata$coastal_region == 1]
count<-count[newdata$coastal_region == 1]
}
ones.vec[i]<-sum(ones)
count.vec[i]<-sum(count)
}
out <-cbind(ones.vec,count.vec)
return(out)
}
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata,n = 1000, prov = NULL)
linear<-fish_pred.ci_zip(model = trc_m4, newdata ,n = 1000, prov = NULL)
View(fish_pred.ci_zip)
sigma<-vcov(model) ##covariance matrix of the model
beta<-coef(model)  ##coefficients of the model
draw<-mvrnorm(n, beta, sigma) ##simulations from a multivariate normal
ones.vec<-vector()
count.vec<-vector()
if(exists("prov")){
newdata<-left_join(newdata, prov)
}
i = 1
model$coefficients<-draw[i,]
lam<-exp(predict.gam(model,newdata = newdata)[,1])
pi<-1-exp(-exp(predict.gam(model,newdata = newdata)[,2]))
ones<- pi * newdata$popres_class
count<-lam*pi*newdata$popres_class
if(exists("prov")){
ones<-ones[newdata$coastal_region == 1]
count<-count[newdata$coastal_region == 1]
}
ones.vec[i]<-sum(ones)
count.vec[i]<-sum(count)
for (i in 1:n){
model$coefficients<-draw[i,]
lam<-exp(predict.gam(model,newdata = newdata)[,1])
pi<-1-exp(-exp(predict.gam(model,newdata = newdata)[,2]))
ones<- pi * newdata$popres_class
count<-lam*pi*newdata$popres_class
if(exists("prov")){
ones<-ones[newdata$coastal_region == 1]
count<-count[newdata$coastal_region == 1]
}
ones.vec[i]<-sum(ones)
count.vec[i]<-sum(count)
}
out <-cbind(ones.vec,count.vec)
if(exists("prov")){
ones<-ones[newdata$coastal_region == 1]
count<-count[newdata$coastal_region == 1]
}
ones.vec[i]<-sum(ones)
count.vec[i]<-sum(count)
linear<-fish_pred.ci_zip(model = trc_m4, newdata ,n = 1000, prov = NULL)
linear<-fish_pred.ci_zip(trc_m4, newdata ,n = 1000, prov = NULL)
linear<-fish_pred.ci_zip(trc_m4, newdata ,n = 1000)
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata, n = 1000)
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata, n = 1000,copy = TRUE)
linear<-fish_pred.ci_zip(model = trc_m4, newdata = newdata, n = 1000)
